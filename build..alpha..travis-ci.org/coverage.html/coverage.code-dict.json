{"/home/travis/build/npmtest/node-npmtest-npm-registry/test.js":"/* istanbul instrument in package npmtest_npm_registry */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-npm-registry/lib.npmtest_npm_registry.js":"/* istanbul instrument in package npmtest_npm_registry */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_npm_registry = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_npm_registry = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-npm-registry/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-npm-registry && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_npm_registry */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_npm_registry\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_npm_registry.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_npm_registry.rollup.js'] =\n            local.assetsDict['/assets.npmtest_npm_registry.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_npm_registry.__dirname + '/lib.npmtest_npm_registry.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-npm-registry/node_modules/npm-registry/index.js":"'use strict';\n\nvar debug = require('debug')('npmjs')\n  , mana = require('mana');\n\n/**\n * A simple npm registry interface for data retrieval.\n *\n * The following options are accepted:\n *\n * - registry: Registry URL we want to connect to.\n * - user: Name of the account.\n * - password: Password of the account.\n * - mirrors: Alternate mirrors we should use when we receive an error.\n * - factor: Backoff factor.\n * - mindelay: Minimum backoff delay.\n * - maxdelay: Maximum backoff delay.\n * - retries: Maximum amount of retries.\n *\n * @constructor\n * @param {Object} options Configuration\n * @api public\n */\nvar Registry = mana.extend({\n  /**\n   * Initialise the module.\n   *\n   * @param {Object} options npmjs configuration.\n   * @api private\n   */\n  initialise: function initialise(options) {\n    options = options || {};\n\n    //\n    // Get an array of active npm mirrors.\n    //\n    var mirrors = Object.keys(Registry.mirrors).map(function map(mirror) {\n      return Registry.mirrors[mirror];\n    });\n\n    options.registry = 'registry' in options ? options.registry : Registry.mirrors.nodejitsu;\n    options.stats = 'stats' in options ? options.stats : 'https://api.npmjs.org/';\n    options.mirrors = 'mirrors' in options ? options.mirrors : mirrors;\n    options.maxdelay = 'maxdelay' in options ? options.maxdelay : 60000;\n    options.mindelay = 'mindelay' in options ? options.mindelay : 100;\n    options.githulk = 'githulk' in options ? options.githulk : null;\n    options.retries = 'retries' in options ? options.retries : 3;\n    options.factor = 'factor' in options ? options.factor : 2;\n\n    //\n    // Make sure that the given registry is a string as we can only connect to\n    // URL's. If it isn't an string we assume it's an object with an `url`\n    // parameter.\n    //\n    if ('string' !== typeof options.registry) options.registry = options.registry.url;\n\n    this.authorization = options.authorization;\n    this.mirrors = options.mirrors;\n    this.mindelay = options.mindelay;\n    this.maxdelay = options.maxdelay;\n    this.statservice = options.stats;\n    this.githulk = options.githulk;\n    this.retries = options.retries;\n    this.factor = options.factor;\n    this.api = options.registry;\n    this.proxy = options.proxy;\n\n    //\n    // Pre-compile the basic authorization so we can do updates and deletes\n    // against the registries.\n    //\n    if (!this.authorization && options.user && options.password) {\n      debug('received authorization information for %s', options.user);\n      this.authorization = new Buffer(\n        options.user +':'+ options.password\n      ).toString('base64');\n    }\n\n    if (Buffer.isBuffer(this.authorization)) {\n      this.authorization = 'Basic '+ this.authorization;\n    }\n  },\n\n  /**\n   * Common map operations that can be shared between the different endpoints.\n   *\n   * @type {Object}\n   * @private\n   */\n  map: {\n    simple: function simple(data) {\n      return data ? {\n        name: data[1],\n        description: data[2]\n      } : undefined;\n    }\n  }\n});\n\n//\n// Expose list of public endpoints that people can use to connect.\n//\nRegistry.mirrors = {\n  nodejitsu:    'http://registry.nodejitsu.com/',\n  strongloop:   'http://npm.strongloop.com/',\n  npmjsau:      'http://registry.npmjs.org.au/',\n  npmjseu:      'http://registry.npmjs.eu/',\n  npmjspt:      'http://registry.npmjs.pt/',\n  npmjs:        'http://registry.npmjs.org/',\n  cnpmjs:       'http://registry.cnpmjs.org/'\n};\n\n//\n// Drink our own potion.\n//\nRegistry.drink(module);\n","/home/travis/build/npmtest/node-npmtest-npm-registry/node_modules/npm-registry/endpoints/downloads.js":"'use strict';\n\n/**\n * Download download stats from the npm server.\n *\n * @constructor\n * @param {Mana} api The actual API instance.\n * @api private\n */\nfunction Downloads(api) {\n  this.send = api.send.bind(api);\n  this.api = api;\n}\n\n/**\n * Get the total amount of downloads for a given period. If no package name has\n * been supplied the total of all packages will be returned.\n *\n * @param {String} period The period you want to select.\n * @param {String} pkg Optional name of the package.\n * @param {Function} fn Completion callback.\n * @returns {Assign}\n * @api public\n */\nDownloads.prototype.totals = function point(period, pkg, fn) {\n  if ('function' === typeof pkg) {\n    fn = pkg;\n    pkg = null;\n  }\n\n  return this.send(['downloads', 'point', period, pkg], {\n    api: this.api.statservice\n  }, fn).map(function map(data) {\n    //\n    // There is this annoying edge-case in the npm downloads API where they do\n    // not return the correct information for newly published packages. These\n    // newly published packages are missing the `package` and `downloads` field.\n    // We've normalized to their sensible defaults so we can just ignore the\n    // fact that they are unable to correctly estimate the download count for\n    // a new module.\n    //\n    data.package = data.package || pkg;\n    data.downloads = data.downloads || 0;\n\n    return data;\n  });\n};\n\n/**\n * Get the download statics for range of days.\n *\n * @param {String} period The period you want to select.\n * @param {String} pkg Optional name of the package.\n * @param {Function} fn Completion callback.\n * @returns {Assign}\n * @api public\n */\nDownloads.prototype.range = function ranged(period, pkg, fn) {\n  if ('function' === typeof pkg) {\n    fn = pkg;\n    pkg = null;\n  }\n\n  return this.send(['downloads', 'range', period, pkg], {\n    api: this.api.statservice\n  }, fn);\n};\n\n//\n// Exposes the Downloads API.\n//\nmodule.exports = Downloads;\n","/home/travis/build/npmtest/node-npmtest-npm-registry/node_modules/npm-registry/endpoints/packages.js":"'use strict';\n\nvar debug = require('debug')('npmjs::packages')\n  , normalize = require('../normalize')\n  , licenses = require('licenses')\n  , semver = require('../semver');\n\n/**\n * Get all package information.\n *\n * @constructor\n * @param {Registry} api Reference to the wrapping registry.\n * @api private\n */\nfunction Packages(api) {\n  this.api = api;\n\n  this.send = api.send.bind(api);\n  this.view = api.view.bind(api);\n}\n\n/**\n * Get information from the npm package. If the name contains an `@` char we\n * assume that the user wants to get a specific version instead.\n * Example:\n *\n * - primus@0.1.1 would retrieve primus version 0.1.1\n *\n * @param {String} name The name of the node module.\n * @param {Function} fn The callback.\n * @returns {Assign}\n * @api public\n */\nPackages.prototype.get = function get(name, fn) {\n  return this.send(name.replace('@', '/'), fn).map(normalize.packages);\n};\n\n/**\n * Get all packages that are depended upon a given package name.\n *\n * @param {String} name The name of the node module.\n * @param {Function} fn The callback\n * @returns {Assign}\n * @api public\n */\nPackages.prototype.depended = function depended(name, fn) {\n  return this.view('dependedUpon', {\n    key: name\n  }, fn)\n  .map(this.api.map.simple)\n  .filter(Boolean);\n};\n\n/**\n * Find out which users have starred the given package.\n *\n * @param {String} name The name of the node module.\n * @param {Function} fn The callback\n * @returns {Assign}\n * @api public\n */\nPackages.prototype.starred = function starred(name, fn) {\n  return this.view('browseStarPackage', {\n    key: name\n  }, fn).map(function map(data) {\n    return data[2];\n  });\n};\n\n/**\n * Find all packages that matches the giving keywords.\n *\n * @param {String} name The keyword.\n * @param {Function} fn The callback.\n * @returns {Assign}\n * @api public\n */\nPackages.prototype.keyword = function keyword(name, fn) {\n  return this.view('byKeyword', {\n    key: name\n  }, fn)\n  .map(this.api.map.simple)\n  .filter(Boolean);\n};\n\n/**\n * Retrieve all release specific information for the given package name.\n *\n * @param {String} name The package name.\n * @param {Function} fn The callback.\n * @api public\n */\nPackages.prototype.releases = function releases(name, fn) {\n  var api = this.api;\n\n  return this.details(name, fn).emits(function emit(data, add) {\n    if (!data.versions) return;\n\n    //\n    // Add all versions of the given module.\n    //\n    Object.keys(data.versions).forEach(function addmore(version) {\n      var release = data.versions[version];\n      release.date = data.time[version];\n\n      add(normalize.packages(release, data));\n    });\n\n    //\n    // Also add each tag to the releases.\n    //\n    if ('dist-tags' in data) Object.keys(data['dist-tags']).forEach(function (key) {\n      if (key in data.versions) return; // Prevent duplicates\n\n      var version = data['dist-tags'][key]\n        , release;\n\n      //\n      // It's possible that the tag does not exist in the versions object. This\n      // is some odd npm edge case.\n      //\n      // Lesson learned: Never trust npm data structures.\n      //\n      if (!version || !(version in data.versions)) return;\n\n      release = api.merge({}, data.versions[version]);\n\n      //\n      // The JSON.parse(JSON.stringify)) is needed to create a full clone of the\n      // data structure as we're adding tags. That would be override during the\n      // `reduce` procedure.\n      //\n      release.date = data.time[version];\n      release.tag = key;\n\n      add(normalize.packages(release, data));\n    });\n\n    return false;\n  }).reduce(function reduce(memo, release) {\n    memo[release.tag || release.version] = release;\n    return memo;\n  }, {});\n};\n\n/**\n * Get a specific release of a package.\n *\n * @param {String} name The name of the package\n * @param {String} version A valid version number or tag from the package.\n * @param {Function} fn The callback\n * @returns {Assign} Assignment\n * @api public\n */\nPackages.prototype.release = function release(name, version, fn) {\n  return this.details(name +'/'+ version, fn).map(normalize.packages);\n};\n\n/**\n * Get a version for a specific release.\n *\n * @param {String} name The name of the package.\n * @param {String} range The semver version range we should retrieve.\n * @param {Function} fn The callback\n * @returns {Assign} Assignment\n * @api public\n */\nPackages.prototype.range = function ranged(name, range, fn) {\n  if (!semver.validRange(range)) return fn(new Error('Invalid semver range'));\n\n  return this.releases(name, function releases(err, versions) {\n    if (err) return fn(err);\n\n    if (range in versions) {\n      debug('found and direct range (%s) match for %s', range, name);\n      return fn(undefined, versions[range]);\n    }\n\n    var version = semver.maxSatisfying(Object.keys(versions), range);\n\n    debug('max satisfying version for %s is %s', name, version);\n    fn(undefined, versions[version]);\n  });\n};\n\n/**\n * Retrieve additional details for the package information. This a lot slower\n * than a simple `.get` but much more detailed and accurate as it uses custom\n * parsers and mapping operations to parse the data as good as possible.\n *\n * @TODO Extract missing descriptions from github.\n * @TODO Merge profile information from github / authors.\n *\n * @param {String} name The name of the node module.\n * @param {Function} fn The callback.\n * @returns {Assign}\n * @api public\n */\nPackages.prototype.details = function details(name, fn) {\n  var packages = this;\n\n  return this.get(name, fn).async.map(function map(data, next) {\n    licenses(data, {\n      githulk: packages.api.githulk,\n      npmjs: packages\n    }, function parsed(err, licenses) {\n      data.licenses = licenses;\n\n      if (err) debug('failed to detect license: %s', err.message);\n      return next(err, data);\n    });\n  });\n};\n\n//\n// Expose the module.\n//\nmodule.exports = Packages;\n","/home/travis/build/npmtest/node-npmtest-npm-registry/node_modules/npm-registry/normalize/index.js":"'use strict';\n\n//\n// Expose the packages and users.\n//\nexports.packages = require('./packages');\nexports.users = require('./users');\n","/home/travis/build/npmtest/node-npmtest-npm-registry/node_modules/npm-registry/normalize/packages.js":"'use strict';\n\nvar creation = '2010-01-14T01:41:08-08:00'  // The date that the registry got spec'd.\n  , extract = require('extract-github')\n  , semver = require('../semver')\n  , to = require('./to');\n\n/**\n * Normalize package data.\n *\n * @param {Object} data The package data.\n * @param {Object} fallback Optional data structure to fallback\n * @returns {Object} The cleaned up data structure.\n * @api public\n */\nfunction packages(data, fallback) {\n  if (!data || 'object' !== to.type(data)) return {};\n\n  var releases = Object.keys(data.versions || data.times || {})\n    , latest;\n\n  releases = releases.filter(function clean(version) {\n    try { return !!semver.valid(version, true); }\n    catch (e) { return false; }\n  }).sort(function sort(a, b) {\n    return semver.gt(a, b, true) ? -1 : 1;\n  }).reduce(function reduce(result, release) {\n    result[release] = data.versions[release]._npmUser;\n    return result;\n  }, {});\n\n  //\n  // Clean up the dist-tags before we can figure out the latest package.\n  //\n  if ('object' !== typeof data['dist-tags']) data['dist-tags'] = {};\n  if (!('latest' in data['dist-tags'])) data['dist-tags'].latest = releases[0];\n\n  latest = (data.versions || {})[data['dist-tags'].latest] || {};\n\n  if (to.type(fallback) !== 'object') {\n    fallback = latest;\n\n    //\n    // The fastest way of creating a clone of an object.\n    //\n    try { fallback = JSON.parse(JSON.stringify(fallback)); }\n    catch (e) {}\n  }\n\n  //\n  // These can not be transformed to a normal value that easily so we set them\n  // first.\n  //\n  data._id = data.name = data.name || data._id || fallback.name || fallback._id;\n  data.license = data.license || fallback.license;\n  data.licenses = to.licenses(data, fallback);\n  data.github = extract(data);\n  data.releases = releases;\n  data.latest = latest;\n\n  [\n    { key: '_npmUser',              value: {}, parse: to.gravatar                 },\n    { key: 'bugs',                  value: {}, parse: to.github('issues')         },\n    { key: 'bundledDependencies',   value: []                                     },\n    { key: 'dependencies',          value: {}                                     },\n    { key: 'description',           value: ''                                     },\n    { key: 'devDependencies',       value: {}                                     },\n    { key: 'engines',               value: {}                                     },\n    { key: 'homepage',              value: {}, parse: to.github()                 },\n    { key: 'keywords',              value: []                                     },\n    { key: 'maintainers',           value: [], parse: to.gravatar                 },\n    { key: 'optionalDependencies',  value: {}                                     },\n    { key: 'peerDependencies',      value: {}                                     },\n    { key: 'readme',                value: ''                                     },\n    { key: 'readmeFilename',        value: ''                                     },\n    { key: 'repository',            value: {}, parse: to.github()                 },\n    { key: 'scripts',               value: {}                                     },\n    { key: 'time',                  value: {}                                     },\n    { key: 'version',               value: ''                                     },\n    { key: 'versions',              value: {}                                     }\n  ].forEach(function each(transform) {\n    var key = transform.key;\n\n    data[key] = data[key] || fallback[key] || transform.value;\n\n    //\n    // If there's an additional data transformer run that over the structure.\n    //\n    if (transform.parse && data[key]) {\n      if (Array.isArray(data[key])) {\n        data[key] = data[key].map(transform.parse.bind(data));\n      } else {\n        data[key] = transform.parse.call(data, data[key]);\n      }\n    }\n\n    //\n    // Additional check to ensure that the field has the correct value. Or we\n    // will default to our normal value.\n    //\n    if (to.type(data[key]) !== to.type(transform.value)) {\n      data[key] = transform.value;\n    }\n  });\n\n  //\n  // Transform keywords in to an array.\n  //\n  if ('string' === typeof data.keywords) data.keywords.split(/[\\s|,]{1,}/);\n  if (!Array.isArray(data.keywords)) delete data.keywords;\n\n  //\n  // Add modification and creation as real date objects to the data structure.\n  // They are hidden in a `time` object.\n  //\n  if (!data.modified || !data.created) {\n    data.modified = data.modified || data.mtime;\n    data.created = data.created || data.ctime;\n\n    if (data.time.modified && !data.modified) data.modified = data.time.modified;\n    if (data.time.created && !data.created) data.created = data.time.created;\n\n    if (!data.modified && releases[0] in data.time) {\n      data.modified = data.time[releases[0]];\n    }\n\n    if (!data.created && releases[releases.length -1] in data.time) {\n      data.created = data.time[releases[releases.length -1]];\n    }\n\n    data.modified = data.modified || creation;\n    data.created = data.created || creation;\n  }\n\n  //\n  // Transform all dates to valid Date instances.\n  //\n  if ('string' === typeof data.modified) data.modified = new Date(data.modified);\n  if ('string' === typeof data.created) data.created = new Date(data.created);\n\n  Object.keys(data.time).forEach(function normalize(version) {\n    data.time[version] = new Date(data.time[version]);\n  });\n\n  //\n  // data.users is actually the people who've starred this module using npm.star\n  // nobody in their right minds would have known that if you know what you're\n  // looking for.\n  //\n  data.starred = Object.keys(data.users || fallback.users || {});\n\n  //\n  // Clean up the data structure with information that is not needed or is\n  // pointlessly recursive. Or should not be defined if it's empty.\n  //\n  if (!data.readmeFilename) delete data.readmeFile;\n  if (data._attachments) delete data._attachments;\n\n  //\n  // Another npm oddety, if you don't have a README file it will just add `no\n  // README data found` as content instead of actually solving this at the view\n  // level of a website.\n  //\n  if (!data.readme || /no readme data found/i.test(data.readme)) delete data.readme;\n\n  //\n  // It could be that a given module has been (forcefully) unpublished by the\n  // registry.\n  //\n  data.unpublished = data._deleted === true || !!data.time.unpublished;\n\n  // @TODO reuse github information for missing bugs fields.\n  // @TODO normalize .web / .url in repo, license author etc.\n  // @TODO reuse github for homepage.\n  return data;\n}\n\n//\n// Expose the normalizer\n//\nmodule.exports = packages;\n","/home/travis/build/npmtest/node-npmtest-npm-registry/node_modules/npm-registry/semver.js":"'use strict';\n\nvar semver = require('semver');\n\n//\n// Introduce semver on the module's exports so we can still use all it's\n// methods while improving and extending it.\n//\nObject.keys(semver).forEach(function introduce(method) {\n  exports[method] = semver[method];\n});\n\n/**\n * Test if a given version number is a pre-release.\n *\n * @param {String} version The version number.\n * @returns {Boolean}\n * @api public\n */\nexports.prerelease = function prerelease(version) {\n  var parsed = semver.parse(version);\n\n  return parsed\n  && parsed.prerelease\n  && parsed.prerelease.length;\n};\n\n/**\n * A more versitile maxSatisfying method for semver.\n *\n * @param {Array} versions Array of version numbers to get the greatest from.\n * @param {String} range The version number it should find.\n * @param {boolean} strict Strict match.\n * @returns {String|Undefined} Version number that matches.\n * @api public\n */\nexports.maxSatisfying = function maxSatisfying(versions, range, strict) {\n  //\n  // Make sure we only get valid version numbers\n  //\n  versions = versions.filter(function filter (version) {\n    return semver.valid(version);\n  });\n\n  range = typeof range === 'string'\n    ? range.trim()\n    : range;\n\n  //\n  // Exact version & range match.\n  //\n  if (semver.valid(range) && ~versions.indexOf(range)) {\n    return range;\n  }\n\n  if (strict && (!range || range === '*')) {\n    var version = semver.maxSatisfying(versions.map(function map(version) {\n      return !exports.prerelease(version) ? version : null;\n    }), range);\n\n    if (version) return version;\n  }\n\n  return semver.maxSatisfying(versions, range);\n};\n","/home/travis/build/npmtest/node-npmtest-npm-registry/node_modules/npm-registry/normalize/to.js":"'use strict';\n\nvar extract = require('extract-github').url\n  , toString = Object.prototype.toString\n  , crypto = require('crypto')\n  , url = require('url');\n\n//\n// to.js is a small collection of parsers and utilities that makes it easier to\n// normalize the data structures that are returned from The npm Registry API.\n//\n\n/**\n * Get accurate type information for the given JavaScript class.\n *\n * @param {Mixed} of The thing who's type class we want to figure out.\n * @returns {String} lowercase variant of the name.\n * @api private\n */\nexports.type = function type(of) {\n  return toString.call(of).slice(8, -1).toLowerCase();\n};\n\n/**\n * Decide the best way of merging license data.\n *\n * @param {Mixed} data\n * @param {Mixed} fallback\n * @returns {Mixed} The one that should be merged.\n */\nexports.licenses = function licenses(data, fallback) {\n  var fblicenses = fallback.licenses\n    , dlicenses = data.licenses\n    , fbok, dok;\n\n  fbok = Array.isArray(fblicenses) && fblicenses.every(function every(license) {\n    return 'string' === exports.type(license);\n  });\n\n  dok = Array.isArray(dlicenses) && dlicenses.every(function every(license) {\n    return 'string' === exports.type(license);\n  });\n\n  if (dok && !fbok) return dlicenses;\n  if (fbok && !dok) return fblicenses;\n\n  return dlicenses || fblicenses;\n};\n\n/**\n * Create a gravatar for the given email.\n *\n * @param {Object} data Object that has an `email` property.\n * @returns {Object} The data object.\n * @private\n */\nexports.gravatar = function gravatar(data) {\n  var email = (\n    'string' === typeof data.email\n      ? data.email\n      : ''\n  ).toLowerCase().trim();\n\n  if (!email || (data.gravatar && !~data.gravatar.indexOf('?'))) {\n    return data; // Gravatar's are constructed from email addresses.\n  }\n\n  data.gravatar_id = crypto.createHash('md5').update(email).digest('hex');\n  data.gravatar = 'https://secure.gravatar.com/avatar/'+ data.gravatar_id;\n\n   return data;\n};\n\n/**\n * Default to something from github.\n *\n * @param {String} path The path we should append to the string.\n * @returns {Function}\n * @api public\n */\nexports.github = function github(path) {\n  return function githubtransform(data) {\n    var type = exports.type(data)\n      , existing = extract(data);\n\n    if (!existing) {\n      if (!this.github) return undefined;\n\n      existing = 'https://github.com/'+ this.github.user +'/'+ this.github.repo;\n      if (path) existing += '/'+ path;\n    } else {\n      //\n      // Normalize the URL to something useful. As it could be that we were\n      // given some of the following URL structures:\n      //\n      // - git@github.com:primus/primus.git\n      // - git://github.com/primus/primus.git#branch\n      // - https://github.com/primus/primus.git\n      // - git+ssh://git@github.com/primus/primus.git#branch\n      //\n      existing = existing.replace(/^git@/, '').replace(/com\\:/, 'com/');\n      existing = url.parse(existing);\n      existing.protocol = !existing.protocol || 'git:' === existing.protocol ? 'http:' : existing.protocol;\n      existing.slashes = true;\n      existing.path = existing.pathname = (existing.pathname || existing.path || '').replace(/\\.git$/, '');\n      existing.hash = null;\n      existing = url.format(existing);\n    }\n\n    if ('object' !== type) return {\n      url: existing\n    };\n\n    data.url = existing;\n    delete data.web;\n\n    return data;\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-npm-registry/node_modules/npm-registry/normalize/users.js":"'use strict';\n\nvar extract = require('extract-github')\n  , to = require('./to');\n\n/**\n * Normalize user profile information.\n *\n * @param {Object} data The profile data.\n * @returns {Object} The cleaned up data structure.\n * @api public\n */\nfunction users(data) {\n  if (!data || 'object' !== to.type(data)) return {};\n\n  //\n  // Clean up github information by extracting github user name from the URL and\n  // reconstructing it. People can put anything in here, so we just want to make\n  // sure that WE decided on the our internal structure, not the users.\n  //\n  if (data.github) {\n    if ('string' !== typeof data.github) {\n      delete data.github;\n    } else {\n      data.github = (extract(data.github) || {}).user;\n    }\n\n    //\n    // The user didn't specify a homepage, we're going to default to their\n    // Github profile as that is the most interesting for most developers.\n    //\n    if ('string' === typeof data.github && !data.homepage) {\n      data.homepage = 'https://github.com/'+ data.github;\n    }\n  }\n\n  //\n  // It's possible that the twitter profile is stored with an `@` prefix or with\n  // a full URL. We only need the twitter handle as we can construct the URL's\n  // our self.\n  //\n  if (data.twitter) {\n    var twitter = /twitter.com\\/[#!@\\/]{0,}([^\\/]+)\\/?/gi;\n\n    if ('string' !== typeof data.twitter) {\n      delete data.twitter;\n    } else if (data.twitter.indexOf('@') === 0) {\n      data.twitter = data.twitter.slice(1);\n    } else if (twitter.test(data.twitter)) {\n      data.twitter = twitter.exec(data.twiter)[1];\n    } else {\n      data.twitter = data.twitter\n        .replace(/^@*(.*)/, '$1')\n        .replace(/^https?:\\/\\/twitter.com\\//i, '');\n    }\n  }\n\n  //\n  // Make sure we follow the same gravatar URL pattern as the maintainers in the\n  // packages.\n  //\n  to.gravatar(data);\n\n  //\n  // The fields is way to opinionated and should have existed in the npm's\n  // website instead. We're going to remove this as it's only duplicate\n  // bullshit.\n  //\n  delete data.fields;\n\n  return data;\n}\n\nmodule.exports = users;\n","/home/travis/build/npmtest/node-npmtest-npm-registry/node_modules/npm-registry/endpoints/users.js":"'use strict';\n\nvar normalize = require('../normalize');\n\n/**\n * Access users based request information.\n *\n * @constructor\n * @param {Registry} api Reference to the wrapping registry.\n * @api private\n */\nfunction Users(api) {\n  this.api = api;\n  this.send = api.send.bind(api);\n  this.view = api.view.bind(api);\n}\n\n/**\n * Add a user as maintainer of a package.\n *\n * @param {String} name The user's name who needs to own the package.\n * @param {String} pkg The module it should become an owner off.\n * @param {Function} fn The callback.\n * @returns {Assign}\n * @api public\n */\nUsers.prototype.add = function add(name, pkg, fn) {\n  return this.send(name, {\n    method: 'PUT',\n    json: {}\n  }, fn);\n};\n\n/**\n * Create a new npm account.\n *\n * @param {String} username The desired user name.\n * @param {String} email Accounts email.\n * @param {String} password Account password.\n * @param {Function} fn Callback.\n * @returns {Assign}\n * @api public\n */\nUsers.prototype.create = function create(username, email, password, fn) {\n  password = (password || '').toString().trim();\n  username = (username || '').toString().trim();\n  email = (email || '').toString().trim();\n\n  //\n  // @TODO this will break our Assign return flow, making chaining impossible.\n  //\n  if (!password) return fn(new Error('Missing password'));\n  if (!~password.indexOf(':')) return fn(new Error('Password cannot contain a `:`'));\n  if (!email) return fn(new Error('Missing email'));\n  if (!~email.indexOf('@')) return fn(new Error('Invalid email address'));\n  if (!username) return fn(new Error('Missing username'));\n\n  return this.send('/-/user/org.couchdb.user:'+ encodeURIComponent(username), {\n    method: 'PUT',\n    json: {\n        _id: 'org.couchdb.user:'+ username\n      , date: (new Date()).toISOString()\n      , email: email\n      , name: username\n      , password: password\n      , roles: []\n      , type: 'user'\n    }\n  }, fn);\n};\n\n/**\n * Update the user.\n *\n * @param {String} username The user's name.\n * @param {Object} fields The fields we want to add.\n * @param {Function} fn Completion callback.\n * @returns {Assign}\n * @api public\n */\nUsers.prototype.update = function update(username, fields, fn) {\n  username = '/-/user/org.couchdb.user:'+ encodeURIComponent(username);\n\n  var users = this;\n\n  /**\n   * Small helper function to handle revisions in CouchDB.\n   *\n   * @param {Error} err An optional error object.\n   * @param {String} _rev The current rev in the CouchDB.\n   * @param {Object} data Optional data.\n   * @api private\n   */\n  function rev(err, _rev, data) {\n    if (err) return fn(err);\n\n    return users.send(username +'/-rev/'+ _rev, {\n      method: 'PUT',\n      json: users.api.merge(data || {}, fields)\n    }, fn);\n  }\n\n  if ('_rev' in fields) return rev(undefined, fields._rev);\n  return this.send(username, rev);\n};\n\n/**\n * List all packages for the given name.\n *\n * @param {String} name The user's name who's packages we want to list.\n * @param {Function} fn The callback.\n * @returns {Assign}\n * @api public\n */\nUsers.prototype.list = function list(name, fn) {\n  return this.view('browseAuthors', {\n    key: name\n  }, fn)\n  .map(this.api.map.simple)\n  .filter(Boolean);\n};\n\n/**\n * List all packages that the user has starred.\n *\n * @param {String} name The user's name\n * @param {Function} fn The callback.\n * @returns {Assign}\n * @api public\n */\nUsers.prototype.starred = function starred(name, fn) {\n  return this.view('browseStarUser', {\n    key: name\n  }, fn)\n  .map(this.api.map.simple)\n  .filter(Boolean);\n};\n\n/**\n * Get profile information.\n *\n * @param {String} username The user's name.\n * @param {Function} fn The callback.\n * @returns {Assign}\n * @api public\n */\nUsers.prototype.get = function get(username, fn) {\n  username = '/-/user/org.couchdb.user:'+ encodeURIComponent(username);\n\n  return this.send(username, fn).map(normalize.users);\n};\n\n/**\n * Sync ownership of npm modules with another account. This is useful if you\n * have one base owner of modules like a corporate account and you want to\n * on-board a new user.\n *\n * @param {String} source The user's packages that needs to be synced.\n * @param {String} target The user who needs to have ownership.\n * @param {Object} options Configuration of the sync process.\n * @returns {Assign}\n * @api public\n */\nUsers.prototype.sync = function sync(source, target, options, fn) {\n  if ('function' === typeof options) {\n    fn = options;\n    options = null;\n  }\n\n  options = options || {};\n  options.add = 'add' in options ? options.add : true;\n  options.packages = 'packages' in options ? options.packages : false;\n\n  var user = this;\n\n  this.list(source, function (err, packages) {\n    user.api.async.each(packages, function (name, next) {\n      user.add(target, name, next);\n    }, fn);\n  });\n};\n\n//\n// Expose module.\n//\nmodule.exports = Users;\n"}